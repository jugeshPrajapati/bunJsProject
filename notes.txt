bun js fastest js engine it support typescript by default no configuration require for typescript
bun init  ///to create new project
bun add express && bun add -d @types/express    ///add use to install new dependencies, -d use to install package in dev env
bun remove nodemon      /// remove use to uninstall dependencies

bus does not need Traditional file watchers like nodemon restart the entire process,
so HTTP servers and other stateful objects are lost. By contrast, 
bun --hot is able to reflect the updated code without restarting the process. 
 --smol  use to save memory
add this line of code in package.json to execute file in dev mode 
 "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "bun --hot --smol run  ./src/index.ts"
  },

  write this code in terminal to start project 
  bun run dev
  bun add -d prisma //add prisma orm
  bunx prisma //open prisma help
  bunx prisma migrate dev
  migration file are the sql file which use to run sql command
  prisma don't have rename coloumn functionality  
  so use --create-only to create the migration file, and manually modify it then run prisma migrate dev to apply it and verify it works.
  
  >bun add -d @types/model_name 

  To start Redis Stack server using the redis-stack image, run the following command in your terminal:

docker run -d --name redis-stack -p 6379:6379 -p 8001:8001 -e REDIS_ARGS="--requirepass mypassword" redis/redis-stack:latest
docker run -d --name redis-stack -p 6379:6379 -p 8001:8001 redis/redis-stack:latest
see redis on http://localhost:8001/redis-stack/browser
You can then connect to the server using redis-cli, just as you connect to any Redis instance.

If you donâ€™t have redis-cli installed locally, you can run it from the Docker container:

$ docker exec -it redis-stack redis-cli